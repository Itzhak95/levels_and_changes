from scipy.stats import bootstrap
from statistics import mean
import numpy as np

# INPUT THE DATA

# To convert into lists: https://capitalizemytitle.com/tools/column-to-comma-separated-list/

# (1) Enter attitudes towards changes (specifically, increases) in the high and low signal groups
# To get this from STATA, run (e.g.): browse increase_minwage if minwage_high == 0

increase_low = [0,1,1,1]
increase_high = [0,0,1]

# (2) Enter the ideal points
# The variables: Q46 (min_wage), Q50 (taxes), Q54 (refugees), Q58 (benefits), Q62 (NHS)
# To get this from STATA, run (e.g.): browse Q46 if treatment == 1

ideal_points = [40.00,40.00,45.00]

# (3) Enter beliefs in the high and low signal groups
# To get this, run (e.g.): browse minwage_belief if minwage_high == 0

low_beliefs = [35,45,30,50]
high_beliefs = [60, 40, 40]

# PRELIMINARY CHECKS

print('CHECKS')
print(f'Share who want an increase in low signal group: {mean(increase_low)}')
print(f'Share who want an increase in high signal group: {mean(increase_high)}')
print(f'Average ideal point: {mean(ideal_points)}')
print(f'Average belief in low signal group: {mean(low_beliefs)}')
print(f'Average belief in high signal group: {mean(high_beliefs)}')
print('---')

# ESTIMATE

print('ESTIMATE')

# This function calculates the share whose ideal point exceeds their belief

def predicted_share(p_beliefs):
    num_pairs = 0
    ideal_exceeds_actual = 0
    for belief in p_beliefs:
        for ideal in ideal_points:
            num_pairs += 1
            if ideal > belief:
                ideal_exceeds_actual += 1
    return ideal_exceeds_actual/num_pairs

# We can now calculate our estimate

actual_difference = mean(increase_low) - mean(increase_high)
print(f'Actual difference: {actual_difference}')
predicted_difference = predicted_share(low_beliefs) - predicted_share(high_beliefs)
print(f'Predicted difference: {predicted_difference}')
did = predicted_difference - actual_difference
print(f'Difference in difference: {did}')
print('---')

# CONFIDENCE INTERVALS
print('CONFIDENCE INTERVAL')

# Put the data in a suitable form

increase_low = np.array(increase_low)
increase_high = np.array(increase_high)
ideal_points = np.array(ideal_points)
low_beliefs = np.array(low_beliefs)
high_beliefs = np.array(high_beliefs)

# Define the estimator

def estimator(increase_low, increase_high, ideal_points, low_beliefs, high_beliefs):
    actual_difference = mean(increase_low) - mean(increase_high)
    predicted_difference = predicted_share(low_beliefs) - predicted_share(high_beliefs)
    did = predicted_difference - actual_difference
    return did

# Now do the bootstrap
bootstrap_ci = bootstrap((increase_low, increase_high, ideal_points, low_beliefs, high_beliefs), estimator, confidence_level=0.95, method='basic')

# View 95% bootstrapped confidence interval
interval = bootstrap_ci.confidence_interval
print(interval)

print(f'SE: {bootstrap_ci.standard_error}')

#As a final check, look at midpoint of the interval:
print('---')
print('MIDPOINT')
print((interval.low + interval.high)/2)
